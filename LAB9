/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Programa principal
  ******************************************************************************
  * @attention
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"

/* Librer√≠as adicionales -----------------------------------------------------*/
#include "fatfs_sd.h"
#include "string.h"
#include "stdio.h"

/* Variables globales --------------------------------------------------------*/
SPI_HandleTypeDef hspi1;
UART_HandleTypeDef huart2;

FATFS fs;
FIL fil;
FRESULT fres;
char buffer[100];
char rx_data; // Variable para recibir un car√°cter desde Hercules

/* Prototipos de funciones ---------------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_SPI1_Init(void);

/* Funciones personalizadas --------------------------------------------------*/
void uart_send(char *text);
void mostrar_menu(void);
void leer_archivo(char *nombre);

/* ============================================================
 *  Transmisi√≥n UART
 * ============================================================ */
void uart_send(char *text) {
    uint8_t len = strlen(text);
    HAL_UART_Transmit(&huart2, (uint8_t*)text, len, 200);
}

/* ============================================================
 *  Men√∫ principal
 * ============================================================ */
void mostrar_menu(void) {
    uart_send("\r\n==========================================\r\n");
    uart_send("      üåü  LECTOR SD CARD - STM32  üåü\r\n");
    uart_send("==========================================\r\n");
    uart_send("  [1] Mostrar el dibujo del Coraz√≥n ‚ù§Ô∏è\r\n");
    uart_send("  [2] Mostrar el dibujo del Ping√ºino üêß\r\n");
    uart_send("  [3] Mostrar la Palmera üå¥\r\n");
    uart_send("------------------------------------------\r\n");
    uart_send("  Escriba su opci√≥n (1‚Äì3): ");
}

/* ============================================================
 *  Leer un archivo desde la tarjeta SD
 * ============================================================ */
void leer_archivo(char *nombre) {
    char linea[100];

    fres = f_open(&fil, nombre, FA_READ);
    if (fres == FR_OK) {
        sprintf(buffer, "\r\n\nüìÇ Abriendo archivo: %s\r\n", nombre);
        uart_send(buffer);

        // Leer l√≠nea por l√≠nea y enviarla por UART
        while (f_gets(linea, sizeof(linea), &fil)) {
            uart_send(linea);
        }

        f_close(&fil);
        uart_send("\r\n--- Fin del archivo ---\r\n");
    } else {
        sprintf(buffer, "‚ö†Ô∏è No se pudo abrir el archivo: %s\r\n", nombre);
        uart_send(buffer);
    }
}

/* ============================================================
 *  Funci√≥n principal
 * ============================================================ */
int main(void) {
    HAL_Init();
    SystemClock_Config();

    MX_GPIO_Init();
    MX_USART2_UART_Init();
    MX_SPI1_Init();
    MX_FATFS_Init();

    HAL_Delay(500);
    uart_send("\r\n[BOOT] Sistema inicializando...\r\n");

    /* Montaje del sistema de archivos */
    fres = f_mount(&fs, "/", 0);
    if (fres == FR_OK)
        uart_send("‚úÖ MicroSD montada correctamente.\r\n");
    else
        uart_send("‚ùå Error al montar la MicroSD.\r\n");

    mostrar_menu();

    /* Bucle principal */
    while (1) {
        HAL_UART_Receive(&huart2, (uint8_t*)&rx_data, 1, HAL_MAX_DELAY);

        switch (rx_data) {
            case '1':
                leer_archivo("Corazon.txt");
                break;
            case '2':
                leer_archivo("Pinguino.txt");
                break;
            case '3':
                leer_archivo("Palmera.txt");
                break;
            default:
                uart_send("\r\nOpci√≥n inv√°lida ‚ùå. Intente nuevamente.\r\n");
                break;
        }

        mostrar_menu(); // Volver a mostrar el men√∫
    }
}

/* ============================================================
 *  Configuraci√≥n del reloj del sistema
 * ============================================================ */
void SystemClock_Config(void) {
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    __HAL_RCC_PWR_CLK_ENABLE();
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLM = 16;
    RCC_OscInitStruct.PLL.PLLN = 336;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
    RCC_OscInitStruct.PLL.PLLQ = 2;
    RCC_OscInitStruct.PLL.PLLR = 2;

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
        Error_Handler();

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
        Error_Handler();
}

/* ============================================================
 *  Inicializaci√≥n SPI1
 * ============================================================ */
static void MX_SPI1_Init(void) {
    hspi1.Instance = SPI1;
    hspi1.Init.Mode = SPI_MODE_MASTER;
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
    hspi1.Init.NSS = SPI_NSS_SOFT;
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    hspi1.Init.CRCPolynomial = 10;

    if (HAL_SPI_Init(&hspi1) != HAL_OK)
        Error_Handler();
}

/* ============================================================
 *  Inicializaci√≥n UART2
 * ============================================================ */
static void MX_USART2_UART_Init(void) {
    huart2.Instance = USART2;
    huart2.Init.BaudRate = 115200;
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
    huart2.Init.StopBits = UART_STOPBITS_1;
    huart2.Init.Parity = UART_PARITY_NONE;
    huart2.Init.Mode = UART_MODE_TX_RX;
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;

    if (HAL_UART_Init(&huart2) != HAL_OK)
        Error_Handler();
}

/* ============================================================
 *  Inicializaci√≥n de GPIO
 * ============================================================ */
static void MX_GPIO_Init(void) {
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    __HAL_RCC_GPIOC_CLK_ENABLE();
    __HAL_RCC_GPIOH_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();

    HAL_GPIO_WritePin(SD_SS_GPIO_Port, SD_SS_Pin, GPIO_PIN_SET);

    GPIO_InitStruct.Pin = B1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = SD_SS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
    HAL_GPIO_Init(SD_SS_GPIO_Port, &GPIO_InitStruct);
}

/* ============================================================
 *  Manejador de errores
 * ============================================================ */
void Error_Handler(void) {
    __disable_irq();
    while (1) {
    }
}
